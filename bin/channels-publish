#!/usr/bin/env python
import argparse
import colorama
import subprocess
import shutil
import re
import os

CARGO_BIN = os.getenv("CARGO") or "cargo"
GIT_BIN = os.getenv("GIT") or "git"

def colored(s: str, color = None, style = None) -> str:
    if color == None:
        color = ""
    if style == None:
        style = ""

    return f"{color}{style}{s}{colorama.Fore.RESET}{colorama.Back.RESET}{colorama.Style.RESET_ALL}"

def __log(prompt: str, *args):
    print(f"{prompt}:", *args)

def error(*args):
    prompt = colored("error", color=colorama.Fore.RED, style=colorama.Style.BRIGHT)
    __log(prompt, *args)

def warn(*args):
    print(colored("warning:", color=colorama.Fore.YELLOW, style=colorama.Style.BRIGHT), *args)

def info(msg: str, *args):
    print(colored(f"{msg:>12}", color=colorama.Fore.GREEN, style=colorama.Style.BRIGHT), *args)

def run_command(*args: str, log: bool = False, exit_on_error: bool = True):
    cmd_str = colored(" ".join(args), color=colorama.Fore.BLUE)
    info("Running", "command: " + cmd_str)

    status = subprocess.call(args)

    if status != 0:
        raise Exception("command failed: " + cmd_str)

def is_semver_valid(semver: str) -> bool:
    return re.fullmatch("^[0-9]+\.[0-9]+\.[0-9]+$", semver, flags=re.MULTILINE) != None

def is_vcs_dirty() -> bool:
    output = subprocess.check_output([GIT_BIN, "status", "--porcelain"])
    return len(output) != 0

def back_up_file(src: str, dst: str):
    info("Backing", "up", colored(src, color=colorama.Fore.BLUE), "to", colored(dst, color=colorama.Fore.BLUE))
    shutil.copy(src, dst, follow_symlinks=True)

def bump_version(cargo_toml: str, version: str):
    if not is_semver_valid(version):
        raise Exception("version is not a valid SemVer number")

    if is_vcs_dirty():
        warn("vcs is dirty")
        back_up_file(cargo_toml, f"{cargo_toml}.orig")

    f = open(cargo_toml, "r")
    data = f.read()
    f.close()

    data = re.sub("^version\s*=\s*\"[0-9\.]+\"$", f"version = \"{version}\"", data, flags=re.MULTILINE)

    f = open(cargo_toml, "w")
    f.write(data)
    f.close()

def main():
    parser = argparse.ArgumentParser(
        description="Publish a new version of channels"
    )
    parser.add_argument("-p", "--package", help="Specify the package to publish", metavar="<package>", default="channels")
    parser.add_argument("--bump", help="Bump to version", metavar="<semver>")
    parser.add_argument("--yes-commit", dest="commit", help="Commit staged files after bumping the version. Only valid with --bump", action="store_true")
    parser.add_argument("--yes-publish", dest="publish", help="Publish to crates.io. Otherwise uses --dry-run for cargo publish", action="store_true")
    args = parser.parse_args()

    publish_args = [CARGO_BIN, "publish", f"--package={args.package}", "-vvv"]

    if args.bump != None:
        cargo_toml = f"{args.package}/Cargo.toml"

        bump_version(cargo_toml, args.bump)
        info("Bumped", "version to", colored(args.bump, color=colorama.Fore.YELLOW))

        run_command(GIT_BIN, "add", cargo_toml)
        if args.commit:
            msg = f"chore: bump `{args.package}` version to {args.bump}"
            run_command(GIT_BIN, "commit", "-m", msg)
        else:
            publish_args.append("--allow-dirty")

    if not args.publish:
        publish_args.append("--dry-run")

    run_command(*publish_args)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        error(e)
